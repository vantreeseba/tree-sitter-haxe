===================
interface
===================

interface Main {}

---

(module (interface_declaration (keyword) (identifier) (block)))

===================
interface with function
===================

interface Printable {
    public function toString():String;
}

---

(module
  (interface_declaration
    (keyword)
    (identifier)
    (block
      (function_declaration
        (keyword)
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
interface with type params
===================

interface Main<T,U> {}

---

(module
  (interface_declaration
    (keyword)
    (identifier)
    (type_params
      (type (identifier))
      (type (identifier))
    )
    (block)
  )
)

===================
interface with nested type params
===================

interface Main<T, Other<U, V>> {}

---

(module
  (interface_declaration
    (keyword)
    (identifier)
    (type_params
      (type (identifier))
      (type
        (identifier)
        (type_params
          (type (identifier))
          (type (identifier))
        )
      )
    )
    (block)
  )
)


===================
interface extending another
===================

interface ITest extends IBanana {}

---

(module (interface_declaration
  (keyword) (identifier)
  (keyword) (identifier)
  (block)
))


===================
class implementing interface
===================

class Main implements ITest {}

---

(module (class_declaration (keyword) (identifier) (keyword) (identifier) (block)))

===================
class implementing multiple interfaces
===================

class Main implements ITest implements IAnother {}

---

(module (class_declaration
  (keyword) (identifier)
  (keyword) (identifier)
  (keyword) (identifier)
  (block)
))



===================
final class
===================

final class Main {}

---

(module (class_declaration (keyword) (keyword) (identifier) (block)))


===================
class
===================

class Main {}

---

(module (class_declaration (keyword) (identifier) (block)))

===================
class with type params
===================

class Main<T,U> {}

---

(module
  (class_declaration
    (keyword)
    (identifier)
    (type_params
      (type (identifier))
      (type (identifier))
    )
    (block)
  )
)


===================
class constructor
===================

class Main {
  function new(){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier) (block))
    )
  )
)


===================
class function
===================

class Main {
  function foo(){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier) (block))
    )
  )
)

===================
class function with type params
===================

class Main {
  function foo<T,U>(){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration
        (keyword)
        (identifier)
        (type_params
          (type (identifier))
          (type (identifier))
        )
        (block))
    )
  )
)


===================
class function with arg
===================

class Main {
  function foo(x){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier)
        (function_arg (identifier))
        (block)
      )
    )
  )
)

===================
class function with arg, types and default param.
===================

class Main {
  function foo(x:Int = 3, y:String){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier)
        (function_arg (identifier) (type (identifier)) (integer))
        (function_arg (identifier) (type (identifier)))
        (block)
      )
    )
  )
)

===================
class with property and read/write access
===================

class Main {
  public var x(default, null):Int;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration (keyword) (keyword) (identifier)
        (access_identifiers (keyword) (keyword))
        (type (identifier))
      )
    )
  )
)

===================
function with generic typed arg
===================

function foo(x:Array<Int>){}

---

(module
  (function_declaration
    (keyword)
    (identifier)
    (function_arg
      (identifier)
      (type
        (identifier)
        (type_params (type (identifier)))
      )
    )
    (block)
  )
)

===================
function with anonymous struct arg
===================

function foo(x:{z:int, y:float}){}

---

(module
  (function_declaration
    (keyword)
    (identifier)
    (function_arg
      (identifier)
      (type
        (pair (identifier) (type (identifier)))
        (pair (identifier) (type (identifier)))
      )
    )
    (block)
  )
)


===================
class with runtime metadata
===================

@test
class Main {
}

---

(module
  (class_declaration
    (metadata (identifier))
    (keyword) (identifier)
    (block)
  )
)

===================
class with compile time metadata
===================

@:test
class Main {
}

---

(module
  (class_declaration
    (metadata (identifier))
    (keyword) (identifier)
    (block)
  )
)


===================
class function with runtime metadata
===================

class Main {
  @test
  function foo(){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration
        (metadata (identifier))
        (keyword)
        (identifier)
        (block)
      )
    )
  )
)

===================
class function with compile time metadata
===================

class Main {
  @:test
  function foo(){}
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration
        (metadata (identifier))
        (keyword)
        (identifier)
        (block)
      )
    )
  )
)

===================
class variable with runtime metadata
===================

class Main {
  @test
  var foo:Int;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (metadata (identifier))
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
class variable with compile time metadata
===================

class Main {
  @:test
  var foo:Int;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (metadata (identifier))
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
class public static inline function
===================

class Main {
  public static inline function foo(){}
}

---
(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration
      (keyword)
      (keyword)
      (keyword)
      (keyword)
      (identifier) (block))
    )
  )
)

===================
class function with declaration assignment statement
===================

class Main {
  function foo(){
    var x = 4;
    var y = 'test';
  }
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier)
        (block
          (variable_declaration (keyword) (identifier) (operator) (integer))
          (variable_declaration (keyword) (identifier) (operator) (string))
        )
      )
    )
  )
)

===================
class function with seperate declaration and assignment statements
===================

class Main {
  function foo(){
    var x;
    var y;

    x = 4;
    y = x;
  }
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (function_declaration (keyword) (identifier)
        (block
          (variable_declaration (keyword) (identifier))
          (variable_declaration (keyword) (identifier))
          (identifier) (operator) (integer)
          (identifier) (operator) (identifier)
        )
      )
    )
  )
)

===================
class function with this
===================

class Main {
  public var x;
  function foo(){
    this.x = 4;
  }
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (keyword)
        (identifier)
      )
      (function_declaration (keyword) (identifier)
        (block
          (member_expression (keyword) (identifier))
          (operator)
          (integer)
        )
      )
    )
  )
)



===================
class variables
===================

class Main {
  public var x;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (keyword)
        (identifier)
      )
    )
  )
)

===================
class variables with basic type
===================

class Main {
  public var x:Int;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
class variables with parameterized type
===================

class Main {
  public var x:Array<Int>;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (keyword)
        (identifier)
        (type
          (identifier)
          (type_params (type (identifier)))
        )
      )
    )
  )
)


===================
class final variables with basic type
===================

class Main {
  public final x:Int;
}

---

(module
  (class_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
type def
===================

typedef MyType = {
  var x:Int;
}

---

(module
  (typedef_declaration (keyword) (identifier)
    (block
      (variable_declaration
        (keyword)
        (identifier)
        (type (identifier))
      )
    )
  )
)

===================
type def 'alias'
===================

typedef MyType = Int;

---

(module
  (typedef_declaration
    (keyword)
    (identifier)
    (type (identifier))
  )
)

===================
type def 'alias'
===================

typedef MyType = Array<Int>;

---

(module
  (typedef_declaration
    (keyword)
    (identifier)
    (type
      (identifier)
      (type_params (type (identifier)))
    )
  )
)


===================
var declaration with type
===================

var x:Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type (identifier))
  )
)

===================
var declaration with type and access_identifiers
===================

var x(get, set):Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (access_identifiers (keyword) (keyword))
    (type (identifier))
  )
)


===================
var declaration with type and parenthesis
===================

var x:(((Int)));

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type (identifier))
  )
)

===================
var declaration with type with params
===================

var x:Array<Int>;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (identifier)
      (type_params (type (identifier)))
    )
  )
)

===================
var declaration array comprehension
===================

var a = [for (i in 0...5) i];

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (operator)
    (array
      (call_expression
        (identifier)
        (range_expression (identifier) (keyword) (integer) (integer))
      )
      (identifier)
    )
  )
)

===================
var declaration with function type with no inputs
===================

var x:() -> Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (function_type
        (type (identifier))
      )
    )
  )
)

===================
var declaration with function type
===================

var x:Int -> Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (function_type
        (type (identifier))
        (type (identifier))
      )
    )
  )
)

===================
var declaration with function type with named input
===================

var x:(arg:Int) -> Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (function_type
        (identifier)
        (type (identifier))
        (type (identifier))
      )
    )
  )
)

===================
var declaration with function type with named input nested function
===================

var x:(arg:()->Int) -> Int;

---

(module
  (variable_declaration
    (keyword)
    name: (identifier)
    type: (type
      (function_type
        (identifier)
        (type (function_type
          (type built_in: (identifier))
        ))
        (type built_in: (identifier))
      )
    )
  )
)

===================
var declaration with function type with named input multiple nested function
===================

var e:(fn:Int->Bool, Float, sub:(Bool, Bool) -> Int) -> Bool;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type (function_type
        (identifier)
        (type (function_type
          (type (identifier))
          (type
          (identifier))
        ))
      (type (identifier))
      (identifier)
      (type (function_type
        (type (identifier))
        (type (identifier))
        (type (identifier))
      ))
      (type (identifier))
    ))
  )
)

===================
var declaration with function type with named input multiple nested function with lots of params
===================

var e:((fn:(Int->Bool), Float, sub:((Bool, Bool) -> Int))->Bool);

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type (function_type
        (identifier)
        (type (function_type
          (type (identifier))
          (type
          (identifier))
        ))
      (type (identifier))
      (identifier)
      (type (function_type
        (type (identifier))
        (type (identifier))
        (type (identifier))
      ))
      (type (identifier))
    ))
  )
)

===================
var declaration with function type with wrapped parens
===================

var x:((arg:Int) -> Int);

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (function_type
        (identifier)
        (type (identifier))
        (type (identifier))
      )
    )
  )
)



===================
var declaration with function type
===================

var x:(Int,Int) -> Int;

---

(module
  (variable_declaration
    (keyword)
    (identifier)
    (type
      (function_type
        (type (identifier))
        (type (identifier))
        (type (identifier))
      )
    )
  )
)

